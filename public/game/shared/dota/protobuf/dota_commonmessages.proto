//====== Copyright (c) 2012, Valve Corporation, All rights reserved. ========//
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation 
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//===========================================================================//
//
// Purpose: The file defines our Google Protocol Buffers which are used in over 
// the wire messages for the Source engine.
//
//=============================================================================

// We care more about speed than code size
option optimize_for = SPEED;

// We don't use the service generation functionality
option cc_generic_services = false;


// 
// STYLE NOTES:
//
// Use CamelCase CMsgMyMessageName style names for messages.
// 
// Use lowercase _ delimited names like my_steam_id for field names, this is non-standard for Steam,
// but plays nice with the Google formatted code generation.  
// 
// Try not to use required fields ever. Only do so if you are really really sure you'll never want them removed. 
// Optional should be preffered as it will make versioning easier and cleaner in the future if someone refactors
// your message and wants to remove or rename fields.
//
// Use fixed64 for JobId_t, GID_t, or SteamID.  This is appropriate for any field that is normally
// going to be larger than 2^56.  Otherwise use int64 for 64 bit values that are frequently smaller
// than 2^56 as it will safe space on the wire in those cases.
//
// Similar to fixed64, use fixed32 for RTime32 or other 32 bit values that are frequently larger than
// 2^28.  It will safe space in those cases, otherwise use int32 which will safe space for smaller values.
// An exception to this rule for RTime32 is if the value will frequently be zero rather than set to an actual 
// time.
//

import "google/protobuf/descriptor.proto";

// for CMsgVector, etc.
import "netmessages.proto";

//=============================================================================
// Dota Common Messages
//=============================================================================
enum EDOTAChatWheelMessage
{
	k_EDOTA_CW_Ok = 0;
	k_EDOTA_CW_Care = 1;
	k_EDOTA_CW_GetBack = 2;
	k_EDOTA_CW_NeedWards = 3;
	k_EDOTA_CW_Stun = 4;
	k_EDOTA_CW_Help = 5;
	k_EDOTA_CW_Push = 6;
	k_EDOTA_CW_GoodJob = 7;
	k_EDOTA_CW_Missing = 8;
	k_EDOTA_CW_Missing_Top = 9;
	k_EDOTA_CW_Missing_Mid = 10;
	k_EDOTA_CW_Missing_Bottom = 11;
}

enum EDOTAStatPopupTypes
{
	k_EDOTA_SPT_Textline = 0;
	k_EDOTA_SPT_Basic = 1;
	k_EDOTA_SPT_Poll = 2;
}

message CDOTAMsg_LocationPing
{
	optional int32 x = 1;
	optional int32 y = 2;
	optional int32 target = 3;
	optional bool direct_ping = 4;
}

message CDOTAMsg_ItemAlert
{
	optional int32 x = 1;
	optional int32 y = 2;
	optional int32 itemid = 3;
}

message CDOTAMsg_MapLine
{
	optional int32 x = 1;
	optional int32 y = 2;
	optional bool initial = 3;
}

message CDOTAMsg_WorldLine
{
	optional int32 x = 1;
	optional int32 y = 2;
	optional int32 z = 3;
	optional bool initial = 4;
	optional bool end = 5;
}

message CDOTAMsg_SendStatPopup
{
	optional EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
	repeated string stat_strings = 2;
	repeated int32 stat_images = 3;
}


//=============================================================================


